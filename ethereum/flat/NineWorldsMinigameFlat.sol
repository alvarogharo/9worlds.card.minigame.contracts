pragma solidity 0.8.7;

// File: @chainlink/contracts/src/v0.8/interfaces/LinkTokenInterface.sol
// SPDX-License-Identifier: MIT
interface LinkTokenInterface {
  function allowance(address owner, address spender) external view returns (uint256 remaining);
  function approve(address spender, uint256 value) external returns (bool success);
  function balanceOf(address owner) external view returns (uint256 balance);
  function decimals() external view returns (uint8 decimalPlaces);
  function decreaseApproval(address spender, uint256 addedValue) external returns (bool success);
  function increaseApproval(address spender, uint256 subtractedValue) external;
  function name() external view returns (string memory tokenName);
  function symbol() external view returns (string memory tokenSymbol);
  function totalSupply() external view returns (uint256 totalTokensIssued);
  function transfer(address to, uint256 value) external returns (bool success);
  function transferAndCall(
    address to,
    uint256 value,
    bytes calldata data
  ) external returns (bool success);
  function transferFrom(
    address from,
    address to,
    uint256 value
  ) external returns (bool success);
}
// File: @chainlink/contracts/src/v0.8/VRFRequestIDBase.sol
// SPDX-License-Identifier: MIT
contract VRFRequestIDBase {
  /**
   * @notice returns the seed which is actually input to the VRF coordinator
   *
   * @dev To prevent repetition of VRF output due to repetition of the
   * @dev user-supplied seed, that seed is combined in a hash with the
   * @dev user-specific nonce, and the address of the consuming contract. The
   * @dev risk of repetition is mostly mitigated by inclusion of a blockhash in
   * @dev the final seed, but the nonce does protect against repetition in
   * @dev requests which are included in a single block.
   *
   * @param _userSeed VRF seed input provided by user
   * @param _requester Address of the requesting contract
   * @param _nonce User-specific nonce at the time of the request
   */
  function makeVRFInputSeed(
    bytes32 _keyHash,
    uint256 _userSeed,
    address _requester,
    uint256 _nonce
  ) internal pure returns (uint256) {
    return uint256(keccak256(abi.encode(_keyHash, _userSeed, _requester, _nonce)));
  }
  /**
   * @notice Returns the id for this request
   * @param _keyHash The serviceAgreement ID to be used for this request
   * @param _vRFInputSeed The seed to be passed directly to the VRF
   * @return The id for this request
   *
   * @dev Note that _vRFInputSeed is not the seed passed by the consuming
   * @dev contract, but the one generated by makeVRFInputSeed
   */
  function makeRequestId(bytes32 _keyHash, uint256 _vRFInputSeed) internal pure returns (bytes32) {
    return keccak256(abi.encodePacked(_keyHash, _vRFInputSeed));
  }
}
// File: @chainlink/contracts/src/v0.8/VRFConsumerBase.sol
// SPDX-License-Identifier: MIT
/** ****************************************************************************
 * @notice Interface for contracts using VRF randomness
 * *****************************************************************************
 * @dev PURPOSE
 *
 * @dev Reggie the Random Oracle (not his real job) wants to provide randomness
 * @dev to Vera the verifier in such a way that Vera can be sure he's not
 * @dev making his output up to suit himself. Reggie provides Vera a public key
 * @dev to which he knows the secret key. Each time Vera provides a seed to
 * @dev Reggie, he gives back a value which is computed completely
 * @dev deterministically from the seed and the secret key.
 *
 * @dev Reggie provides a proof by which Vera can verify that the output was
 * @dev correctly computed once Reggie tells it to her, but without that proof,
 * @dev the output is indistinguishable to her from a uniform random sample
 * @dev from the output space.
 *
 * @dev The purpose of this contract is to make it easy for unrelated contracts
 * @dev to talk to Vera the verifier about the work Reggie is doing, to provide
 * @dev simple access to a verifiable source of randomness.
 * *****************************************************************************
 * @dev USAGE
 *
 * @dev Calling contracts must inherit from VRFConsumerBase, and can
 * @dev initialize VRFConsumerBase's attributes in their constructor as
 * @dev shown:
 *
 * @dev   contract VRFConsumer {
 * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)
 * @dev       VRFConsumerBase(_vrfCoordinator, _link) public {
 * @dev         <initialization with other arguments goes here>
 * @dev       }
 * @dev   }
 *
 * @dev The oracle will have given you an ID for the VRF keypair they have
 * @dev committed to (let's call it keyHash), and have told you the minimum LINK
 * @dev price for VRF service. Make sure your contract has sufficient LINK, and
 * @dev call requestRandomness(keyHash, fee, seed), where seed is the input you
 * @dev want to generate randomness from.
 *
 * @dev Once the VRFCoordinator has received and validated the oracle's response
 * @dev to your request, it will call your contract's fulfillRandomness method.
 *
 * @dev The randomness argument to fulfillRandomness is the actual random value
 * @dev generated from your seed.
 *
 * @dev The requestId argument is generated from the keyHash and the seed by
 * @dev makeRequestId(keyHash, seed). If your contract could have concurrent
 * @dev requests open, you can use the requestId to track which seed is
 * @dev associated with which randomness. See VRFRequestIDBase.sol for more
 * @dev details. (See "SECURITY CONSIDERATIONS" for principles to keep in mind,
 * @dev if your contract could have multiple requests in flight simultaneously.)
 *
 * @dev Colliding `requestId`s are cryptographically impossible as long as seeds
 * @dev differ. (Which is critical to making unpredictable randomness! See the
 * @dev next section.)
 *
 * *****************************************************************************
 * @dev SECURITY CONSIDERATIONS
 *
 * @dev A method with the ability to call your fulfillRandomness method directly
 * @dev could spoof a VRF response with any random value, so it's critical that
 * @dev it cannot be directly called by anything other than this base contract
 * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).
 *
 * @dev For your users to trust that your contract's random behavior is free
 * @dev from malicious interference, it's best if you can write it so that all
 * @dev behaviors implied by a VRF response are executed *during* your
 * @dev fulfillRandomness method. If your contract must store the response (or
 * @dev anything derived from it) and use it later, you must ensure that any
 * @dev user-significant behavior which depends on that stored value cannot be
 * @dev manipulated by a subsequent VRF request.
 *
 * @dev Similarly, both miners and the VRF oracle itself have some influence
 * @dev over the order in which VRF responses appear on the blockchain, so if
 * @dev your contract could have multiple VRF requests in flight simultaneously,
 * @dev you must ensure that the order in which the VRF responses arrive cannot
 * @dev be used to manipulate your contract's user-significant behavior.
 *
 * @dev Since the ultimate input to the VRF is mixed with the block hash of the
 * @dev block in which the request is made, user-provided seeds have no impact
 * @dev on its economic security properties. They are only included for API
 * @dev compatability with previous versions of this contract.
 *
 * @dev Since the block hash of the block which contains the requestRandomness
 * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful
 * @dev miner could, in principle, fork the blockchain to evict the block
 * @dev containing the request, forcing the request to be included in a
 * @dev different block with a different hash, and therefore a different input
 * @dev to the VRF. However, such an attack would incur a substantial economic
 * @dev cost. This cost scales with the number of blocks the VRF oracle waits
 * @dev until it calls responds to a request.
 */
abstract contract VRFConsumerBase is VRFRequestIDBase {
  /**
   * @notice fulfillRandomness handles the VRF response. Your contract must
   * @notice implement it. See "SECURITY CONSIDERATIONS" above for important
   * @notice principles to keep in mind when implementing your fulfillRandomness
   * @notice method.
   *
   * @dev VRFConsumerBase expects its subcontracts to have a method with this
   * @dev signature, and will call it once it has verified the proof
   * @dev associated with the randomness. (It is triggered via a call to
   * @dev rawFulfillRandomness, below.)
   *
   * @param requestId The Id initially returned by requestRandomness
   * @param randomness the VRF output
   */
  function fulfillRandomness(bytes32 requestId, uint256 randomness) internal virtual;
  /**
   * @dev In order to keep backwards compatibility we have kept the user
   * seed field around. We remove the use of it because given that the blockhash
   * enters later, it overrides whatever randomness the used seed provides.
   * Given that it adds no security, and can easily lead to misunderstandings,
   * we have removed it from usage and can now provide a simpler API.
   */
  uint256 private constant USER_SEED_PLACEHOLDER = 0;
  /**
   * @notice requestRandomness initiates a request for VRF output given _seed
   *
   * @dev The fulfillRandomness method receives the output, once it's provided
   * @dev by the Oracle, and verified by the vrfCoordinator.
   *
   * @dev The _keyHash must already be registered with the VRFCoordinator, and
   * @dev the _fee must exceed the fee specified during registration of the
   * @dev _keyHash.
   *
   * @dev The _seed parameter is vestigial, and is kept only for API
   * @dev compatibility with older versions. It can't *hurt* to mix in some of
   * @dev your own randomness, here, but it's not necessary because the VRF
   * @dev oracle will mix the hash of the block containing your request into the
   * @dev VRF seed it ultimately uses.
   *
   * @param _keyHash ID of public key against which randomness is generated
   * @param _fee The amount of LINK to send with the request
   *
   * @return requestId unique ID for this request
   *
   * @dev The returned requestId can be used to distinguish responses to
   * @dev concurrent requests. It is passed as the first argument to
   * @dev fulfillRandomness.
   */
  function requestRandomness(bytes32 _keyHash, uint256 _fee) internal returns (bytes32 requestId) {
    LINK.transferAndCall(vrfCoordinator, _fee, abi.encode(_keyHash, USER_SEED_PLACEHOLDER));
    // This is the seed passed to VRFCoordinator. The oracle will mix this with
    // the hash of the block containing this request to obtain the seed/input
    // which is finally passed to the VRF cryptographic machinery.
    uint256 vRFSeed = makeVRFInputSeed(_keyHash, USER_SEED_PLACEHOLDER, address(this), nonces[_keyHash]);
    // nonces[_keyHash] must stay in sync with
    // VRFCoordinator.nonces[_keyHash][this], which was incremented by the above
    // successful LINK.transferAndCall (in VRFCoordinator.randomnessRequest).
    // This provides protection against the user repeating their input seed,
    // which would result in a predictable/duplicate output, if multiple such
    // requests appeared in the same block.
    nonces[_keyHash] = nonces[_keyHash] + 1;
    return makeRequestId(_keyHash, vRFSeed);
  }
  LinkTokenInterface internal immutable LINK;
  address private immutable vrfCoordinator;
  // Nonces for each VRF key from which randomness has been requested.
  //
  // Must stay in sync with VRFCoordinator[_keyHash][this]
  mapping(bytes32 => uint256) /* keyHash */ /* nonce */
    private nonces;
  /**
   * @param _vrfCoordinator address of VRFCoordinator contract
   * @param _link address of LINK token contract
   *
   * @dev https://docs.chain.link/docs/link-token-contracts
   */
  constructor(address _vrfCoordinator, address _link) {
    vrfCoordinator = _vrfCoordinator;
    LINK = LinkTokenInterface(_link);
  }
  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF
  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating
  // the origin of the call
  function rawFulfillRandomness(bytes32 requestId, uint256 randomness) external {
    require(msg.sender == vrfCoordinator, "Only VRFCoordinator can fulfill");
    fulfillRandomness(requestId, randomness);
  }
}
// File: @openzeppelin/contracts/utils/Context.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)
/**
 * @dev Provides information about the current execution context, including the
 * sender of the transaction and its data. While these are generally available
 * via msg.sender and msg.data, they should not be accessed in such a direct
 * manner, since when dealing with meta-transactions the account sending and
 * paying for execution may not be the actual sender (as far as an application
 * is concerned).
 *
 * This contract is only required for intermediate, library-like contracts.
 */
abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }
    function _msgData() internal view virtual returns (bytes calldata) {
        return msg.data;
    }
}
// File: @openzeppelin/contracts/access/Ownable.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)
/**
 * @dev Contract module which provides a basic access control mechanism, where
 * there is an account (an owner) that can be granted exclusive access to
 * specific functions.
 *
 * By default, the owner account will be the one that deploys the contract. This
 * can later be changed with {transferOwnership}.
 *
 * This module is used through inheritance. It will make available the modifier
 * `onlyOwner`, which can be applied to your functions to restrict their use to
 * the owner.
 */
abstract contract Ownable is Context {
    address private _owner;
    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
    /**
     * @dev Initializes the contract setting the deployer as the initial owner.
     */
    constructor() {
        _transferOwnership(_msgSender());
    }
    /**
     * @dev Returns the address of the current owner.
     */
    function owner() public view virtual returns (address) {
        return _owner;
    }
    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        require(owner() == _msgSender(), "Ownable: caller is not the owner");
        _;
    }
    /**
     * @dev Leaves the contract without owner. It will not be possible to call
     * `onlyOwner` functions anymore. Can only be called by the current owner.
     *
     * NOTE: Renouncing ownership will leave the contract without an owner,
     * thereby removing any functionality that is only available to the owner.
     */
    function renounceOwnership() public virtual onlyOwner {
        _transferOwnership(address(0));
    }
    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Can only be called by the current owner.
     */
    function transferOwnership(address newOwner) public virtual onlyOwner {
        require(newOwner != address(0), "Ownable: new owner is the zero address");
        _transferOwnership(newOwner);
    }
    /**
     * @dev Transfers ownership of the contract to a new account (`newOwner`).
     * Internal function without access restriction.
     */
    function _transferOwnership(address newOwner) internal virtual {
        address oldOwner = _owner;
        _owner = newOwner;
        emit OwnershipTransferred(oldOwner, newOwner);
    }
}
// File: @openzeppelin/contracts/utils/Counters.sol
// SPDX-License-Identifier: MIT
// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)
/**
 * @title Counters
 * @author Matt Condon (@shrugs)
 * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number
 * of elements in a mapping, issuing ERC721 ids, or counting request ids.
 *
 * Include with `using Counters for Counters.Counter;`
 */
library Counters {
    struct Counter {
        // This variable should never be directly accessed by users of the library: interactions must be restricted to
        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add
        // this feature: see https://github.com/ethereum/solidity/issues/4637
        uint256 _value; // default: 0
    }
    function current(Counter storage counter) internal view returns (uint256) {
        return counter._value;
    }
    function increment(Counter storage counter) internal {
        unchecked {
            counter._value += 1;
        }
    }
    function decrement(Counter storage counter) internal {
        uint256 value = counter._value;
        require(value > 0, "Counter: decrement overflow");
        unchecked {
            counter._value = value - 1;
        }
    }
    function reset(Counter storage counter) internal {
        counter._value = 0;
    }
}
// File: contracts/interfaces/IVikings.sol
// SPDX-License-Identifier: UNLICENSED
interface IVikings {
    function ownerOf(uint256 tokenId) external view returns (address owner);
    function isVikingLocked(uint256 vikingId) external view returns (bool vikingStatus);
    function mintByType(address _owner, uint256 _type) external;
    function lockToken(uint256 tokenId, bool status) external;
    function tokenStrength(uint256 tokenId) external view returns (uint256 strength);
    function balanceOf(address owner) external view returns (uint256 balance);
    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);
}
// File: contracts/NineWorldsMinigame.sol
// SPDX-License-Identifier: UNLICENSED
contract NineWorldsMinigame is Ownable, VRFConsumerBase {
    using Counters for Counters.Counter;
    enum NftType {
        Sword,
        Axe,
        Shield
    }
    enum MatchResult {
        Empty,
        Tie,
        ComputerWin,
        PlayerWin
    }
    struct NftStatus {
        NftType nftType;
        uint256 totalPower;
        uint8 dailyMatchCounter;
        uint8 reRollCounter;
        uint256 dailyExpirationTimestamp; // Check exp
        uint256 points;
        uint256 currentMatchId;
    }
    struct Match {
        uint256 matchId;
        uint256 nftMatchCount;
        bool isRerrollEnabled;
        uint256[] validNftsForMatch;
        uint256 matchRandomSeed;
        uint256[] playerNfts;
        uint256[] computerNfts;
        mapping(uint256 => bool) repeatedPlayerRandomNumbers;
        mapping(uint256 => bool) repeatedComputerRandomNumbers;
        bool isMatchFinished;
        MatchResult matchResult;
    }
    uint256 constant public ONE_DAY_IN_SECONDS = 86400;
    uint256 public nftPointForPlayerWinner;
    uint256 public nftPointForComputerWinner;
    uint256 public totalNfts;
    uint256 public maxMatchesPerDay;
    uint256 public maxNftMatchCount;
    uint256 public nftPointForPlayerTie;
    uint256 public nftPointForComputerTie;
    uint256 public maxValidId;
    mapping (uint256 => Match) public matchesById; // Historical Matches
    mapping (uint256 => NftStatus) public nftStatusById;
    mapping (uint256 => Match) public nftMatchesByNftId;
    mapping (address => uint256) public usersLastMatchId;
    mapping (bytes32 => uint256) public matchesByRequestId;
    Counters.Counter private lastMatchId;
    IVikings public vikingsContract;
    bytes32 internal keyHash = 0xf86195cf7690c55907b2b611ebb7343a6f649bff128701cc542f0569e2c549da;
    uint256 internal feeLink = 1e14; // 0.0001 LINK POLYGON MATIC
    //bytes32 internal keyHash = 0x2ed0feb3e7fd2022120aa84fab1945545a9f2ffc9076fd6156fa96eaff4c1311;
    //uint256 internal feeLink = 100000000000000000; // 0.0001 LINK RINKEBY MATIC
    event RequestValues(bytes32 requestId);
    event RandomnessEvent(bytes32 requestId);
    event RandomMatchId(bytes32 requestId, uint256 matchId);
    event MatchCreated(uint256 matchId, address user);
    event MatchInitialized(uint256 matchId, address initializerUser);
    event MatchResolved(uint256 matchId);
    constructor(
        IVikings _vikingsContract, 
        uint256 _maxMatchesPerDay, 
        uint256 _maxNftMatchCount, 
        uint256 _nftPointForPlayerWinner, 
        uint256 _nftPointForComputerWinner,
        uint256 _nftPointForPlayerTie,
        uint256 _nftPointForComputerTie,
        uint256 _maxValidId
    )
    //VRFConsumerBase(0x3d2341ADb2D31f1c5530cDC622016af293177AE0, 0xb0897686c545045aFc77CF20eC7A532E3120E0F1){
    VRFConsumerBase(0x3d2341ADb2D31f1c5530cDC622016af293177AE0, 0xb0897686c545045aFc77CF20eC7A532E3120E0F1) {
        vikingsContract = _vikingsContract;
        maxMatchesPerDay = _maxMatchesPerDay;
        maxNftMatchCount = _maxNftMatchCount;
        nftPointForPlayerWinner = _nftPointForPlayerWinner;
        nftPointForComputerWinner = _nftPointForComputerWinner;
        nftPointForPlayerTie = _nftPointForPlayerTie;
        nftPointForComputerTie = _nftPointForComputerTie;
        maxValidId = _maxValidId;
    }
    function setNftTypeAndPower(
        uint256[] memory _nftIds, 
        NftType[] memory _nftTypes, 
        uint256[] memory _powers
    ) 
    external 
    onlyOwner 
    {
        require(
            _nftIds.length == _nftTypes.length,
            "NineWorldsMinigame. NftIds length missmatch"
        );
        require(
            _nftTypes.length == _powers.length,
            "NineWorldsMinigame. Powers length missmatch"
        );
        for (uint8 i = 0; i < _nftIds.length; i++) {
            NftStatus storage _nftStatus = nftStatusById[_nftIds[i]];
            _nftStatus.nftType = _nftTypes[i];
            _nftStatus.totalPower = _powers[i];
            _nftStatus.dailyExpirationTimestamp = block.timestamp;
            totalNfts++;
        }
    }
    function createMatchAndRequestRandom(uint256 _nftMatchCount) external {
        require(
            usersLastMatchId[_msgSender()] == 0,
            "NineWorldsMinigame: Pending match"
        );
        require (
            _nftMatchCount <= maxNftMatchCount,
            "NineWorldsMinigame: Match nft amount exceed max"
        );
        uint256 nftBalance = vikingsContract.balanceOf(_msgSender());
        require (
            nftBalance >= _nftMatchCount,
            "NineWorldsMinigame: Match nft amount exceed user nft amount"
        );
        // Create new Match
        lastMatchId.increment();
        uint256 matchId = lastMatchId.current();
        matchesById[matchId].matchId = matchId;
        matchesById[matchId].nftMatchCount = _nftMatchCount; 
        for (uint8 i = 0; i < nftBalance; i++) {
            uint256 nftId = vikingsContract.tokenOfOwnerByIndex(_msgSender(), i);
            if(nftId <= maxValidId){
                if(nftStatusById[nftId].currentMatchId == 0) {
                    if(nftStatusById[nftId].dailyExpirationTimestamp + ONE_DAY_IN_SECONDS < block.timestamp){
                        nftStatusById[nftId].dailyExpirationTimestamp = block.timestamp;
                        nftStatusById[nftId].dailyMatchCounter = 0;
                    }
                    if(nftStatusById[nftId].dailyMatchCounter < maxMatchesPerDay) {
                        matchesById[matchId].validNftsForMatch.push(nftId);
                    }
                }
            }
        }
        require (
            matchesById[matchId].validNftsForMatch.length >= _nftMatchCount,
            "NineWorldsMinigame: Match nft amount exceed user valid nfts to play"
        );
        usersLastMatchId[_msgSender()] = matchId;
        emit MatchCreated(matchId, _msgSender());
        requestRandomValue(matchId);
    }
    function initializeMatchFor(address user) public {
        uint256 matchId = usersLastMatchId[user];
        require(matchId != 0, "NineWorldsMinigame: No pending match to initialize");
        require(matchesById[matchId].playerNfts.length == 0, "NineWorldsMinigame: Match is already initialized");
        require(matchesById[matchId].matchRandomSeed > 0, "NineWorldsMinigame: RandomNumber not available yet");
        uint256 randomness = matchesById[matchId].matchRandomSeed;
        uint256 nftMatchCount = matchesById[matchId].nftMatchCount;
        uint256[] memory expandedValues = _expandRandomAux(randomness, nftMatchCount * 2);
        uint256[] memory validPlayerNft = matchesById[matchId].validNftsForMatch;
        for (uint8 i = 0; i < nftMatchCount; i++) {
            uint256 randomPlayerNftIndex = _randomIndex(0, validPlayerNft.length, expandedValues[i]);
            while(matchesById[matchId].repeatedPlayerRandomNumbers[randomPlayerNftIndex] == true) {
                randomPlayerNftIndex = (randomPlayerNftIndex + 1) % nftMatchCount;
            }
            uint256 randomPlayerNft = validPlayerNft[randomPlayerNftIndex];
            matchesById[matchId].playerNfts.push(randomPlayerNft);
            matchesById[matchId].repeatedPlayerRandomNumbers[randomPlayerNftIndex] = true;
           // nftMatchesByNftId[randomPlayerNft] = matchesById[matchId];
            nftStatusById[randomPlayerNft].dailyMatchCounter++;
            nftStatusById[randomPlayerNft].currentMatchId = matchId;          
            uint256 randomComputerNftIndex = _randomIndex(1, totalNfts, expandedValues[i + nftMatchCount]);
            while(matchesById[matchId].repeatedComputerRandomNumbers[randomComputerNftIndex] == true) {
                randomComputerNftIndex = (randomComputerNftIndex + 1) % nftMatchCount;
            }
            matchesById[matchId].computerNfts.push(randomComputerNftIndex);
            matchesById[matchId].repeatedComputerRandomNumbers[randomComputerNftIndex] = true;
        }
        emit MatchInitialized(matchId, _msgSender());
    }
    function resolveMatch() public {
        uint256 matchId = usersLastMatchId[_msgSender()];
        require(matchesById[matchId].playerNfts.length > 0, "NineWorldsMinigame: Match is not created or initialized");
        require(!matchesById[matchId].isMatchFinished, "NineWorldsMinigame: Match is finished");
        uint256[] memory playerNfts = matchesById[matchId].playerNfts;
        uint256[] memory computerNfts = matchesById[matchId].computerNfts;
        uint256 playerPoints;
        uint256 computerPoints;
        for (uint8 i = 0; i < matchesById[matchId].nftMatchCount; i++) {
            NftType playerType = nftStatusById[playerNfts[i]].nftType;
            NftType computerType = nftStatusById[computerNfts[i]].nftType;
            if (playerType == NftType.Axe && computerType == NftType.Sword) {
                computerPoints++;
                //AIWinner;
            } else if (playerType == NftType.Shield && computerType == NftType.Sword) {
                playerPoints++;
                //PlayerWinner;
            } else if (playerType == NftType.Shield && computerType == NftType.Axe) {
                computerPoints++;
                //AIWinner;
            } else if (playerType == NftType.Sword && computerType == NftType.Axe) {
                playerPoints++;
                //PlayerWinner;
            } else if (playerType == NftType.Sword && computerType == NftType.Shield) {
                computerPoints++;
                //AIWinner;
            } else if (playerType == NftType.Axe && computerType == NftType.Shield) {
                playerPoints++;
                //PlayerWinner;
            } else {
                //Tie;
            }
            nftStatusById[playerNfts[i]].currentMatchId = 0;
        }
        if(playerPoints > computerPoints) {
            for(uint8 i = 0; i < playerNfts.length; i++) {
                nftStatusById[playerNfts[i]].points += nftPointForPlayerWinner;
            }
            matchesById[matchId].matchResult = MatchResult.PlayerWin; // Player win
        } else if(computerPoints > playerPoints) {
            for(uint8 i = 0; i < computerNfts.length; i++) {
                nftStatusById[computerNfts[i]].points += nftPointForComputerWinner;
            }
            matchesById[matchId].matchResult = MatchResult.ComputerWin; // Computer Win
        } else {
            for(uint8 i = 0; i < playerNfts.length; i++) {
                nftStatusById[playerNfts[i]].points += nftPointForPlayerTie;
                nftStatusById[computerNfts[i]].points += nftPointForComputerTie;
            }
            matchesById[matchId].matchResult = MatchResult.Tie; // Tie
        }
        matchesById[matchId].isMatchFinished = true;
        usersLastMatchId[_msgSender()] = 0;
        emit MatchResolved(matchId);
    }
    function resolveMatchWithReorder(uint256 indexA, uint256 indexB) external {
        uint256 matchId = usersLastMatchId[_msgSender()];
        uint256 playerPower;
        uint256 computerPower;
        (playerPower, computerPower) = getPlayerAndComputerPower(matchId);
        require(
            playerPower > computerPower, 
            "NineWorldsMinigame: Reorder not available: player power is less than computer power"
        );
        uint256[] storage playerNfts = matchesById[matchId].playerNfts;
        uint nftAux = playerNfts[indexB];
        playerNfts[indexB] = playerNfts[indexA];
        playerNfts[indexA] = nftAux;
        resolveMatch();
    }
    function getPlayerAndComputerPower(uint256 matchId) internal view returns (uint256, uint256) {
        Match storage actualMatch = matchesById[matchId];
        uint256 playerPower = 0;
        uint256 computerPower = 0;
        for(uint i = 0; i < actualMatch.nftMatchCount; i++) {
            playerPower += nftStatusById[actualMatch.playerNfts[i]].totalPower;
            computerPower += nftStatusById[actualMatch.computerNfts[i]].totalPower;
        }
        return (playerPower, computerPower);
    }
    function getValidNft(uint256 matchId, uint8 index) external view returns(uint256) {
        return matchesById[matchId].validNftsForMatch[index];
    }
    function getValidPlayerNft(uint256 matchId, uint8 index) external view returns(uint256) {
        return matchesById[matchId].playerNfts[index];
    }
    function getValidComputerNft(uint256 matchId, uint8 index) external view returns(uint256) {
        return matchesById[matchId].computerNfts[index];
    }
    function setNftPointForPlayerWinner(uint256 _points) external onlyOwner {
        nftPointForPlayerWinner = _points;
    }
    function setNftPointForComputerWinner(uint256 _points) external onlyOwner {
        nftPointForComputerWinner = _points;
    }
    function setMaxMatchesPerDay(uint256 _maxMatches) external onlyOwner {
        maxMatchesPerDay = _maxMatches;
    }
    function setMaxNftMatchCount(uint256 _maxNftMatchCount) external onlyOwner {
        maxNftMatchCount = _maxNftMatchCount;
    }
    function setNftPointForPlayerTie(uint256 _nftPointForPlayerTie) external onlyOwner{
        nftPointForPlayerTie = _nftPointForPlayerTie;
    }
    function setNftPointForComputerTie(uint256 _nftPointForComputerTie) external onlyOwner{
        nftPointForComputerTie = _nftPointForComputerTie;
    }
    function setMaxValidId(uint256 _maxValidId) external onlyOwner{
        maxValidId = _maxValidId;
    }
    function _expandRandomAux(uint256 randomValue, uint256 n) internal pure returns (uint256[] memory expandedValues) {
        expandedValues = new uint256[](n);
        for (uint256 i = 0; i < n; i++) {
            expandedValues[i] = uint256(keccak256(abi.encode(randomValue, i)));
        }
    }
    function requestRandomValue(uint256 _matchId) internal returns (bytes32 requestId) {
        require(LINK.balanceOf(address(this)) >= feeLink, "NineWorldsMinigame: Not enough LINK, fill contract with LINK");
        requestId = requestRandomness(keyHash, feeLink);
        matchesByRequestId[requestId] = _matchId;
        emit RequestValues(requestId);
    }
    function _randomIndex(uint256 _minNumber, uint256 _maxNumber, uint256 _randomness) internal view returns (uint256) {
        return (_randomness % _maxNumber) + _minNumber;
    }
    function fulfillRandomness(bytes32 requestId, uint256 randomness) internal override {
        uint256 matchId = matchesByRequestId[requestId];
        matchesById[matchId].matchRandomSeed = randomness;
        emit RandomMatchId(requestId, matchId);
        emit RandomnessEvent(requestId);
    }
}
